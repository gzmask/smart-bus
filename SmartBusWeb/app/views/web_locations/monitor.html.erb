<h2> Reload the browser to see the newest passengers, buses and paths </h2>
<meta http-equiv="Refresh" content="30" />
<%= GMap.header %>
<%= Mapstraction.header(:google) %>
<script src="/javascripts/repeat_exe.js" type="text/javascript"></script>
<script src="/javascripts/prototype.js" type="text/javascript"></script>

<%= @map.div(:width => 1280, :height => 720) %>
<div id="debug"></div>

<!--%= @map.to_html %-->

<script type="text/javascript">
var map;
window.onload = addCodeToFunction(window.onload,function() {
  draw_map_div();
});


//this function got execute once
function draw_map_div(){
  //get the map div display
  mapstraction = new Mapstraction("map_div","google");
  mapstraction.setCenterAndZoom(new LatLonPoint(50.4493,-104.617),12);
  mapstraction.addControls({largeMap : true,mapType : true});
  mapstraction.addControls({
    pan: true,
    zoom: 'small',
    map_type: true
  });

  map = mapstraction.getMap();

      // === The basis of the arrow icon information ===
      var arrowIcon = new GIcon();
      arrowIcon.iconSize = new GSize(24,24);
      arrowIcon.shadowSize = new GSize(1,1);
      arrowIcon.iconAnchor = new GPoint(12,12);
      arrowIcon.infoWindowAnchor = new GPoint(0,0);
      
      // === Returns the bearing in degrees between two points. ===
      // North = 0, East = 90, South = 180, West = 270.
      var degreesPerRadian = 180.0 / Math.PI;
      function bearing( from, to ) {
        // See T. Vincenty, Survey Review, 23, No 176, p 88-93,1975.
        // Convert to radians.
        var lat1 = from.latRadians();
        var lon1 = from.lngRadians();
        var lat2 = to.latRadians();
        var lon2 = to.lngRadians();

        // Compute the angle.
        var angle = - Math.atan2( Math.sin( lon1 - lon2 ) * Math.cos( lat2 ), Math.cos( lat1 ) * Math.sin( lat2 ) - Math.sin( lat1 ) * Math.cos( lat2 ) * Math.cos( lon1 - lon2 ) );
        if ( angle < 0.0 )
         angle  += Math.PI * 2.0;

        // And convert result to degrees.
        angle = angle * degreesPerRadian;
        angle = angle.toFixed(1);

        return angle;
      }
       
      // === A function to create the arrow head at the end of the polyline ===
      function arrowHead(points) {
        // == obtain the bearing between the last two points
        var p1=points[points.length-1];
        var p2=points[points.length-2];
        var dir = bearing(p2,p1);
        // == round it to a multiple of 3 and cast out 120s
        var dir = Math.round(dir/3) * 3;
        while (dir >= 120) {dir -= 120;}
        // == use the corresponding triangle marker 
        arrowIcon.image = "http://www.google.com/intl/en_ALL/mapfiles/dir_"+dir+".png";
        map.addOverlay(new GMarker(p1, arrowIcon));
      }
      
      // === A function to put arrow heads at intermediate points
      function midArrows(points) {
        for (var i=1; i < points.length-1; i++) {  
          var p1=points[i-1];
          var p2=points[i+1];
          var dir = bearing(p1,p2);
          // == round it to a multiple of 3 and cast out 120s
          var dir = Math.round(dir/3) * 3;
          while (dir >= 120) {dir -= 120;}
          // == use the corresponding triangle marker 
          arrowIcon.image = "http://www.google.com/intl/en_ALL/mapfiles/dir_"+dir+".png";
          map.addOverlay(new GMarker(points[i], arrowIcon));
        }
      }


  <% #colors for each bus
    colors = Array.new
    colors << "\"#2fc000\"" #bus1
    colors << "\"#903f00\"" #bus2
    colors << "\"#0030ff\"" #bus3
    colors << "\"#ff0f00\"" #bus4
    colors << "\"#ff00f0\"" #bus5
    colors << "\"#00f0ff\"" #bus6
    #draw the routine line
    buses = WebBus.all 
      buses.each do |bus|
      %>
      var locs = [
      <%
      locations = Array.new
      web_locs = bus.web_locations.sort_by {|a| a.order_num }
      web_locs.each do |location|
        %>new GLatLng( <%=location.latitude.to_s%>, <%=location.longitude.to_s%>), 
      <% end %>
      ];
      var polyline = new GPolyline(locs,<%= colors[(bus.id-1)%6] %>,5,0.85);
      map.addOverlay(polyline);
      if (locs.length > 1)
        arrowHead(locs);
      <% end %>
      <%
        @web_locations.each do |location|
          %>
            var point = new GLatLng(<%=location.latitude.to_s%>, <%=location.longitude.to_s%>)
            <% if location.is_current %>
              title_str = "Bus: <%=location.web_bus.id%>" 
              var busIcon = new GIcon(G_DEFAULT_ICON);
              busIcon.shadow = "/images/bus_shadow.png";
              busIcon.image = "/images/bus_icon.png";
              busIcon.iconSize = new GSize(50, 33);
              busIcon.shadowSize = new GSize(51, 21);
              busIcon.iconAnchor = new GPoint(9, 24);
              busIcon.infoWindowAnchor = new GPoint(9, 2);
              markerOptions = { icon:busIcon, title : title_str};
              var marker<%=location.id%> = new GMarker(point,markerOptions);
              var detail_str = "route number: <%=location.order_num%>";
              map.addOverlay(addInfoWindowToMarker(marker<%=location.id%>,detail_str,{}));
              //here is the animation that moves the bus per second
              bus_animation.executePeriodically(1000, 999999999, map, marker<%=location.id%>, <%=location.id%>);
            <% elsif location.is_pickup %>
              title_str = "Pick up password: <%=location.web_passenger.password%>" 
              var srcIcon = new GIcon(G_DEFAULT_ICON);
              srcIcon.shadow = "/images/shadow_icon.png";
              srcIcon.image = "/images/src_icon.png";
              srcIcon.iconSize = new GSize(48, 44);
              srcIcon.shadowSize = new GSize(48, 44);
              srcIcon.iconAnchor = new GPoint(9, 24);
              srcIcon.infoWindowAnchor = new GPoint(9, 2);
              markerOptions = { icon:srcIcon, title : title_str};
              var marker<%=location.id%> = new GMarker(point,markerOptions);
              var detail_str = "passenger id: <%=location.web_passenger.id%>";
              map.addOverlay(addInfoWindowToMarker(marker<%=location.id%>,detail_str,{}));
            <% elsif location.is_dropdown %>
              title_str = "drop down password: <%=location.web_passenger.password%>" 
              var desIcon = new GIcon(G_DEFAULT_ICON);
              desIcon.shadow = "/images/shadow_icon.png";
              desIcon.image = "/images/src_icon.png";
              desIcon.iconSize = new GSize(48, 44);
              desIcon.shadowSize = new GSize(48, 44);
              desIcon.iconAnchor = new GPoint(9, 24);
              desIcon.infoWindowAnchor = new GPoint(9, 2);
              markerOptions = { icon:desIcon, title : title_str};
              var marker<%=location.id%> = new GMarker(point,markerOptions);
              var detail_str = "passenger id: <%=location.web_passenger.id%>";
              map.addOverlay(addInfoWindowToMarker(marker<%=location.id%>,detail_str,{}));
            <% end %>

          <%
        end
      %>

};

//this function got executed every second to animate the buses
function bus_animation(map, marker, location_id){

  //json request from web_locations.json
  new Ajax.Request('/web_locations.json', { method:'get',
  onSuccess: function(transport){
      var web_locations = transport.responseText.evalJSON(true);
      //$('debug').innerHTML += String(transport.responseText) + '<br />';

      //get the buses locations and reposition the buses
      for (var i = 0; i< web_locations.length; i++)
      {
        if (web_locations[i].web_location.id == location_id)
        {
              var point = new GLatLng(web_locations[i].web_location.latitude, web_locations[i].web_location.longitude);
              marker.setLatLng(point);
        }
      }
    }
  });
};

</script>
